/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <50>;
            retro-tap;
        };

        skquick: skquick {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQUICK";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
        };
    };

    macros {
        global_search: global_search {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp COLON &kp PRCNT &kp S &kp FSLH>;
            label = "GLOBAL_SEARCH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &lt 8 Q  &kp W    &kp E         &lt 10 R             &kp T        &kp Y    &kp U     &kp I          &kp O    &kp P       &trans
&none  &lt 6 A  &lt 3 S  &lt 2 D       &lt 1 F              &kp G        &kp H    &kp J     &kp K          &kp L    &kp ESCAPE  &trans
&none  &lt 7 Z  &lt 9 X  &lt 5 C       &lt 4 V              &kp B        &kp N    &kp M     &kp BACKSPACE  &kp TAB  &sk RCTRL   &trans
                         &sk LEFT_GUI  &skquick LEFT_SHIFT  &kp SPACE    &kp RET  &kp RALT  &sk RCMD
            >;
        };

        Delimiters {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EXCLAMATION  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOLLAR       &trans  &trans
                        &trans  &trans  &trans    &trans  &trans                &trans
            >;
        };

        Arithmetic {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LESS_THAN  &kp GREATER_THAN  &kp POUND    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp PLUS       &kp MINUS         &kp EQUAL    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp ASTERISK   &kp FSLH          &kp PERCENT  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans         &trans
            >;
        };

        Punctuation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp SQT    &kp DOUBLE_QUOTES  &kp GRAVE      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp COMMA  &kp DOT            &kp AMPERSAND  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp SEMI   &kp COLON          &kp TILDE      &trans  &trans
                        &trans  &trans  &trans    &trans  &trans     &trans
            >;
        };

        Numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS         &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_NUMLOCK   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &trans
                        &trans  &trans  &trans    &trans           &trans           &trans
            >;
        };

        Remaining {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp CARET      &caps_word      &kp CAPS  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp PIPE       &kp AT_SIGN     &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp BACKSLASH  &kp UNDERSCORE  &trans    &trans  &trans
                        &trans  &trans  &trans    &trans  &trans         &trans
            >;
        };

        Navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(NUMBER_1)  &kp LC(LEFT_ARROW)      &kp LC(UP_ARROW)  &kp RC(RIGHT)      &kp PAGE_UP    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT          &kp DOWN                &kp UP            &kp RIGHT          &kp PAGE_DOWN  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(NUMBER_2)  &kp LG(LA(LEFT_ARROW))  &kp LC(DOWN)      &kp RG(RA(RIGHT))  &kp RG(RA(I))  &trans
                        &trans  &trans  &trans    &trans            &trans                  &trans
            >;
        };

        vscode {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(LS(E))  &kp LS(LG(P))  &kp LG(P)  &kp LS(LG(F))      &kp LS(LG(D))          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LC(GRAVE)  &kp LA(R)      &kp RA(D)  &kp LS(LG(H))      &kp LS(LA(LC(LG(D))))  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(B)      &trans         &trans     &kp RC(RG(SPACE))  &kp LS(LA(LC(LG(S))))  &trans
                        &trans  &trans  &trans    &trans         &trans         &trans
            >;
        };

        zmk {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans       &trans  &bt BT_PRV      &none
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_NXT  &bt BT_PRV   &trans  &bt BT_CLR      &none
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &sys_reset  &bootloader  &trans  &bt BT_CLR_ALL  &none
                        &trans  &trans  &trans    &trans  &trans      &trans
            >;
        };

        vim {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &global_search  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans          &trans  &trans
            >;
        };

        Function_Keys {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp K_MUTE        &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp K_PLAY_PAUSE  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans            &kp F1  &kp F2  &kp F3  &kp F10  &trans
                        &trans  &trans  &trans    &trans            &trans  &trans
            >;
        };

        layer_13 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
